/** AUTO-GENERATED BY Better-Auth PocketBase adapter
 *
 * Run once:
 *   npx tsx ./migration.ts
 */
import PocketBase from "pocketbase";

export async function createPocketBaseSchema(pb: PocketBase) {
  const collections = [
  {
    "name": "ba_user",
    "type": "base",
    "system": false,
    "schema": [
      {
        "name": "name",
        "type": "text",
        "required": true,
        "unique": false
      },
      {
        "name": "email",
        "type": "text",
        "required": true,
        "unique": true
      },
      {
        "name": "emailVerified",
        "type": "bool",
        "required": true,
        "unique": false
      },
      {
        "name": "image",
        "type": "text",
        "required": false,
        "unique": false
      },
      {
        "name": "createdAt",
        "type": "date",
        "required": true,
        "unique": false
      },
      {
        "name": "updatedAt",
        "type": "date",
        "required": true,
        "unique": false
      }
    ]
  },
  {
    "name": "ba_session",
    "type": "base",
    "system": false,
    "schema": [
      {
        "name": "expiresAt",
        "type": "date",
        "required": true,
        "unique": false
      },
      {
        "name": "token",
        "type": "text",
        "required": true,
        "unique": true
      },
      {
        "name": "createdAt",
        "type": "date",
        "required": true,
        "unique": false
      },
      {
        "name": "updatedAt",
        "type": "date",
        "required": true,
        "unique": false
      },
      {
        "name": "ipAddress",
        "type": "text",
        "required": false,
        "unique": false
      },
      {
        "name": "userAgent",
        "type": "text",
        "required": false,
        "unique": false
      },
      {
        "name": "userId",
        "type": "relation",
        "required": true,
        "unique": false,
        "options": {
          "collectionName": "ba_user",
          "cascadeDelete": true
        }
      }
    ]
  },
  {
    "name": "ba_account",
    "type": "base",
    "system": false,
    "schema": [
      {
        "name": "accountId",
        "type": "text",
        "required": true,
        "unique": false
      },
      {
        "name": "providerId",
        "type": "text",
        "required": true,
        "unique": false
      },
      {
        "name": "userId",
        "type": "relation",
        "required": true,
        "unique": false,
        "options": {
          "collectionName": "ba_user",
          "cascadeDelete": true
        }
      },
      {
        "name": "accessToken",
        "type": "text",
        "required": false,
        "unique": false
      },
      {
        "name": "refreshToken",
        "type": "text",
        "required": false,
        "unique": false
      },
      {
        "name": "idToken",
        "type": "text",
        "required": false,
        "unique": false
      },
      {
        "name": "accessTokenExpiresAt",
        "type": "date",
        "required": false,
        "unique": false
      },
      {
        "name": "refreshTokenExpiresAt",
        "type": "date",
        "required": false,
        "unique": false
      },
      {
        "name": "scope",
        "type": "text",
        "required": false,
        "unique": false
      },
      {
        "name": "password",
        "type": "text",
        "required": false,
        "unique": false
      },
      {
        "name": "createdAt",
        "type": "date",
        "required": true,
        "unique": false
      },
      {
        "name": "updatedAt",
        "type": "date",
        "required": true,
        "unique": false
      }
    ]
  },
  {
    "name": "ba_verification",
    "type": "base",
    "system": false,
    "schema": [
      {
        "name": "identifier",
        "type": "text",
        "required": true,
        "unique": false
      },
      {
        "name": "value",
        "type": "text",
        "required": true,
        "unique": false
      },
      {
        "name": "expiresAt",
        "type": "date",
        "required": true,
        "unique": false
      },
      {
        "name": "createdAt",
        "type": "date",
        "required": false,
        "unique": false
      },
      {
        "name": "updatedAt",
        "type": "date",
        "required": false,
        "unique": false
      }
    ]
  }
] as const;

  for (const col of collections) {
    try {
      await pb.collections.getOne(col.name);
      console.info(`[PocketBase] collection "${col.name}" already exists`);
    } catch {
      await pb.collections.create(col);
      console.info(`[PocketBase] created collection "${col.name}"`);
    }
  }
}

if (require.main === module) {
  // Execute immediately if run via node/tsx
  const pb = new PocketBase(process.env.POCKETBASE_URL ?? "http://127.0.0.1:8090");

  let ready: Promise<any> | null = null;

  if (process.env.POCKETBASE_TOKEN) {
    ready = (async () => pb.authStore.save(process.env.POCKETBASE_TOKEN!, null))();
  } else if (process.env.POCKETBASE_EMAIL && process.env.POCKETBASE_PASSWORD) {
    ready = pb.admins.authWithPassword(process.env.POCKETBASE_EMAIL!, process.env.POCKETBASE_PASSWORD!);
  }

  if (ready) {
    console.log("✓ PocketBase admin authenticated");

    ready.then(() => {
      createPocketBaseSchema(pb).then(() => {
        console.log("✓ PocketBase schema initialised");
        process.exit(0);
      });
    })
  } else {
    console.log("✓ PocketBase admin not authenticated");
  }
}
